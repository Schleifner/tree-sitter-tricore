============================================
Labels
============================================

.
 .: 
_
 _:
.lab1
 .lab2: 
.1.str: 
.L6:
swap
  movLabel:
0:
1024:
\label
.\label
?label
%label
^label
_Lab\^reg1
_Lab\%dx
_Lab\?dx
Lab\?dx\sfx

---

(source_file
  (label name: (symbol))
  (label name: (symbol))
  (label name: (symbol))
  (label name: (symbol))
  (label name: (symbol))
  (label name: (symbol))
  (label name: (symbol))
  (label name: (symbol))
  (label name: (symbol))
  (label name: (symbol))
  (local_label)
  (local_label)
  (label name: (interpolated (macro_arg)))
  (label name: (interpolated (macro_arg)))
  (label name: (interpolated (macro_arg)))
  (label name: (interpolated (macro_arg)))
  (label name: (interpolated (macro_arg)))
  (label name: (interpolated (macro_arg)))
  (label name: (interpolated (macro_arg)))
  (label name: (interpolated (macro_arg)))
  (label name: (interpolated (macro_arg) (macro_arg)))
)

============================================
Comments
============================================

; This is a comment
;comment without whitespace
  ; comment
label ;comment after label
label;comment after label
mov: ;comment after label
label1:;comment after label
  nop ; comment after no-op instruction
  nop; comment after no-p[ instruction
  mov d3, #6 ; comment after instruction
  mov d3, #6; comment after instruction

---

(source_file
  (comment)
  (comment)
  (comment)
  (label name: (symbol)) (comment)
  (label name: (symbol)) (comment)
  (label name: (symbol)) (comment)
  (label name: (symbol)) (comment)
  (instruction
    mnemonic: (instruction_mnemonic))
  (comment)
  (instruction
    mnemonic: (instruction_mnemonic))
  (comment)
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (decimal_integer)))
  (comment)
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (decimal_integer)))
  (comment)
)

============================================
Instructions
============================================

  rfe 
  call  foobar
  mov d3, d1
  mov d3, #6
  mov d3, ##6
  mov d1 , d3
  mov d1,d3
  eq.w d3,d1,  d2
  extr   d3, d1, e2
  extr    d3, d1, d2, 4
  madd.q  d2/d3, e4, d1, d7, #1
  madd.q  d2 / d3, e4,d1, d7u, #1
  madd.q  d2/ d3, e4, d1, d7l, #1
  madd.h  e2, e6, d1, d9ll, #1
  madd.h  e2, e6, d1, d9lu, #1
  madd.h  e2, e6, d1, d9ul, #1
  madd.h  e2, e6, d1, d9uu, #1
  jz.t  d1:22, foobar
  jz.t  d1 : 22, foobar

---

(source_file
  (instruction 
    mnemonic: (instruction_mnemonic))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (symbol)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (data_register)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (data_register)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (data_register)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (data_register)
      (data_register)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (data_register)
      (extended_data_register)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register)
      (data_register)
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (extended_data_register)
      (extended_data_register)
      (data_register)
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (extended_data_register)
      (extended_data_register)
      (data_register)
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (extended_data_register)
      (extended_data_register)
      (data_register)
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (extended_data_register)
      (extended_data_register)
      (data_register)
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (extended_data_register)
      (extended_data_register)
      (data_register)
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (extended_data_register)
      (extended_data_register)
      (data_register)
      (data_register)
      (decimal_integer)))
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (extended_data_register)
      (extended_data_register)
      (data_register)
      (data_register)
      (decimal_integer)))    
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register_bit
        (data_register)
        (bit_position))
      (symbol))) 
  (instruction
    mnemonic: (instruction_mnemonic)
    operands: (operand_list
      (data_register_bit
        (data_register)
        (bit_position))
      (symbol))) 
)

============================================
Macro calls
============================================

  CONST.D 
  swap_mem  0,1     ; swap memory contents
  SWAP_MEM  AREG, BREG
foo: CONST.D
bar:swap_mem 0 , 1

---

(source_file
  (macro_call macro: (symbol))
  (macro_call 
    macro: (symbol)
    operands: (operand_list
      (decimal_integer)
      (decimal_integer)))
  (comment)
  (macro_call 
    macro: (symbol)
    operands: (operand_list
      (symbol)
      (symbol)))
  (label name: (symbol))
  (macro_call
    macro: (symbol))
  (label name: (symbol))
  (macro_call
    macro: (symbol)
    operands: (operand_list
      (decimal_integer)
      (decimal_integer)))
)

============================================
Directives
============================================

  .comment  " This is a comment directive"
  .COMMENT 'This is a comment directive'
  .end
  .include 'storage/mem.asm'    ; include file
  .INCLUDE <data.asm>           ; Do not look in current directory
  .fail 'print a value', 3 + 2
  .message "Parameter out of range"
  .warning "Parameter out of Range" 
  exit .ALIAS _Exit
  MYSYMBOL .EQU 0x4000
  .GLOBAL LOOPA   ; LOOPA will be globally accessible by other modules
  .local  loopa, loopb
  .EXTERN AA,CC,DD  ;defined elsewhere
  .WEAK   AA,CC,DD
  .org  100
  .org
  .org  ,data
  .org  0x8000, data, cluster('main')
  .org  0x8000, data, group('main')
  .sdecl ".data.t.abssec",data,cluster('main') at 100
  .sdecl	'.text.c_demo.main',code,cluster('main')
  .sdecl  '.text.t.main', CODE
  .sdecl  '.data.t.abssec', data at 0x100
  .sect   ".text.c_demo.main"
  .sect   '.data.t.abssec', RESET
  COUNT .set 0
  .set STD 0x100
  .size main, main_function_end-main
main: .type func

---

(source_file
  (directive_comment
    mnemonic: (directive_mnemonic)
    operands: (string_literal))
  (directive_comment
    mnemonic: (directive_mnemonic)
    operands: (string_literal))
  (directive_end
    mnemonic: (directive_mnemonic))
  (directive_include
    mnemonic: (directive_mnemonic)
    operands: (string_literal))
  (comment)
  (directive_include
    mnemonic: (directive_mnemonic)
    operands: (filename))
  (comment)
  (directive_message
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (binary_expression
      left: (decimal_integer)
      operator: (operator)
      right: (decimal_integer)))
  (directive_message
    mnemonic: (directive_mnemonic)
    operands: (string_literal))
  (directive_message
    mnemonic: (directive_mnemonic)
    operands: (string_literal))
  (directive_alias
    left: (symbol)
    mnemonic: (directive_mnemonic)
    right: (symbol))
  (directive_equ
    left: (symbol)
    mnemonic: (directive_mnemonic)
    right: (hexadecimal))
  (directive_declare_symbol
    mnemonic: (directive_mnemonic)
    operands: (symbol))
  (comment)
  (directive_declare_symbol
    mnemonic: (directive_mnemonic)
    operands: (symbol)
    operands: (symbol))
  (directive_import_symbol
    mnemonic: (directive_mnemonic)
    operands: (symbol)
    operands: (symbol)
    operands: (symbol))
  (comment)
  (directive_import_symbol
    mnemonic: (directive_mnemonic)
    operands: (symbol)
    operands: (symbol)
    operands: (symbol))
  (directive_org
    mnemonic: (directive_mnemonic)
    operands: (decimal_integer))
  (directive_org
    mnemonic: (directive_mnemonic))
  (directive_org
    mnemonic: (directive_mnemonic)
    operands: (symbol))
  (directive_org
    mnemonic: (directive_mnemonic)
    operands: (hexadecimal)
    operands: (symbol)
    operands: (cluster))
  (directive_org
    mnemonic: (directive_mnemonic)
    operands: (hexadecimal)
    operands: (symbol)
    operands: (cluster))
  (directive_sdecl
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (symbol)
    operands: (cluster)
    operands: (decimal_integer))
  (directive_sdecl
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (symbol)
    operands: (cluster))
  (directive_sdecl
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (symbol))
  (directive_sdecl
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (symbol)
    operands: (hexadecimal))
  (directive_sect
    mnemonic: (directive_mnemonic)
    operands: (string_literal))
  (directive_sect
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (symbol))
  (directive_set
    left: (symbol)
    mnemonic: (directive_mnemonic)
    right: (decimal_integer))
  (directive_set
    mnemonic: (directive_mnemonic)
    left: (symbol)
    right: (hexadecimal))
  (directive_size
    mnemonic: (directive_mnemonic)
    operands: (symbol)
    operands: (binary_expression
      left: (symbol)
      operator: (operator)
      right: (symbol)
    ))
  (label name: (symbol))
  (directive_type
    mnemonic: (directive_mnemonic)
    type: (label_type))
)

============================================
Data Definition Directives
============================================

ACC:  .ACCUM 0.1,0.2,0.3
  .align 16
STRING: .ascii "Hello world"
STRINGZ: .ASCIIZ "Hello world", "Z"
TABLE .byte 'two', 0, 'strings', 0
CHARS .BYTE 'A','B','C','D'
  .byte 'AB',,'C'
FLT: .float   12.457,+0.27E-13
DBL: .double  12.457,-0.27E+13
FRACT: .FRACT   0.1, 0.2, 0.3
SFRACT: .SFRACT 0.1, 0.2, 0.3
HTBL: .HALF 'ABC',,'D'
WTBL: .WORD 'ABC'
uninit .SPACE 12

---

(source_file
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (decimal_float)
    operands: (decimal_float)
    operands: (decimal_float))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (decimal_integer))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (string_literal))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (string_literal))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (decimal_integer)
    operands: (string_literal)
    operands: (decimal_integer))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (string_literal)
    operands: (string_literal)
    operands: (string_literal))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (string_literal))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (decimal_float)
    operands: (unary_expression
      operator: (operator)
      operand: (decimal_float)))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (decimal_float)
    operands: (unary_expression
      operator: (operator)
      operand: (decimal_float)))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (decimal_float)
    operands: (decimal_float)
    operands: (decimal_float))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (decimal_float)
    operands: (decimal_float)
    operands: (decimal_float))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (string_literal))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (string_literal))
  (label name: (symbol))
  (directive_data_definition
    mnemonic: (directive_mnemonic)
    operands: (decimal_integer))
)

============================================
Macro Preprocessor Directives
============================================

  .define LEN "32"
  .undef LEN
  .dup 4              ; duplicate directive
myLabel: .byte 10     ; assembly source line
  .endm

  .dupa VALUE,12,,32,34
  .byte VALUE
  .endm

  .dupc VALUE, '123'
  .byte VALUE
  .endm

  .dupf NUM,0,7
  MOV D\NUM, #0
  .ENDM

  .if TEST
    mov d1, #6
  .ELIF DEMO
    mov d1, #8
  .ELSE 
    mov d1, #10
  .ENDIF

  .if TEST
    mov d1, #6
  .ELIF DEMO
    mov d1, #8
  .ENDIF

  .if TEST
    mov d1, #6
  .ELSE 
    mov d1, #10
  .ENDIF

  .if TEST
    mov d1, #6
  .ENDIF

  CONST.D .MACro dx, v        ; header
    movh  dx, #@his(v)        ; body
    addi  dx, dx, #@los(v)
    .endm                     ; terminator

  .pmacro CONST.D, MAC1

  SWAP_SYM  .macro reg1, reg2, flag ; swap memory contents
    .if flag
      .exitm
    .endif
    ld.w  d0, [A\reg1]
    ld.w  d1, [A\reg2]
    st.w  [A\reg1], d1
    st.w  [A\reg2], d0
  .endm

---

(source_file
  (directive_define
    mnemonic: (directive_mnemonic)
    left: (symbol)
    right: (string_literal))
  (directive_undef
    mnemonic: (directive_mnemonic)
    operands: (symbol))
  (directive_dup
    mnemonic: (directive_mnemonic)
    count: (decimal_integer)
    body: (element_list
      (label name: (symbol))
      (directive_data_definition
        mnemonic: (directive_mnemonic)
        operands: (decimal_integer))
      (comment))
    mnemonic: (directive_mnemonic))
  (directive_dupa
    mnemonic: (directive_mnemonic)
    formal_arg: (symbol)
    argument: (decimal_integer)
    argument: (decimal_integer)
    argument: (decimal_integer)
    body: (element_list
      (directive_data_definition
        mnemonic: (directive_mnemonic)
        operands: (symbol)))
    mnemonic: (directive_mnemonic))
  (directive_dupc
    mnemonic: (directive_mnemonic)
    formal_arg: (symbol)
    argument: (string_literal)
    body: (element_list
      (directive_data_definition
        mnemonic: (directive_mnemonic)
        operands: (symbol)))
    mnemonic: (directive_mnemonic))
  (directive_dupf
    mnemonic: (directive_mnemonic)
    formal_arg: (symbol)
    argument: (decimal_integer)
    argument: (decimal_integer)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (interpolated
            (macro_arg))
          (decimal_integer))))
    mnemonic: (directive_mnemonic))
  (directive_conditional
    mnemonic: (directive_mnemonic)
    test: (symbol)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (decimal_integer))))
    mnemonic: (directive_mnemonic)
    test: (symbol)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (decimal_integer))))
    mnemonic: (directive_mnemonic)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (decimal_integer))))
    mnemonic: (directive_mnemonic))
  (directive_conditional
    mnemonic: (directive_mnemonic)
    test: (symbol)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (decimal_integer))))
    mnemonic: (directive_mnemonic)
    test: (symbol)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (decimal_integer))))
    mnemonic: (directive_mnemonic))
  (directive_conditional
    mnemonic: (directive_mnemonic)
    test: (symbol)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (decimal_integer))))
    mnemonic: (directive_mnemonic)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (decimal_integer))))
    mnemonic: (directive_mnemonic))
  (directive_conditional
    mnemonic: (directive_mnemonic)
    test: (symbol)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (decimal_integer))))
    mnemonic: (directive_mnemonic))
  (directive_macro
    left: (symbol)
    mnemonic: (directive_mnemonic)
    right: (symbol)
    right: (symbol)
    body: (element_list
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (symbol)
          (function_call
            (builtIn_function)
            (expression_list
              (symbol)))))
      (comment)
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (symbol)
          (symbol)
          (function_call
            (builtIn_function)
            (expression_list
              (symbol))))))
    mnemonic: (directive_mnemonic))
    (comment)
  (directive_pmacro
    mnemonic: (directive_mnemonic)
    operands: (symbol)
    operands: (symbol))
  (directive_macro
    left: (symbol)
    mnemonic: (directive_mnemonic)
    right: (symbol)
    right: (symbol)
    right: (symbol)
    body: (element_list
      (directive_conditional
        mnemonic: (directive_mnemonic)
        test: (symbol)
        body: (element_list
          (directive_exitm
            mnemonic: (directive_mnemonic)))
        mnemonic: (directive_mnemonic))
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (base_offset
            (register_macro_argument
              (macro_arg)))))
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (data_register)
          (base_offset
            (register_macro_argument
              (macro_arg)))))
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (base_offset
            (register_macro_argument
              (macro_arg)))
          (data_register)))
      (instruction
        mnemonic: (instruction_mnemonic)
        operands: (operand_list
          (base_offset
            (register_macro_argument
              (macro_arg)))
          (data_register))))
      mnemonic: (directive_mnemonic))
)

============================================
HLL Directives
============================================

  .calls  'main','nfunc'
  .calls 'main','',8
  .compiler_version	"TASKING SmartCode v10.1r1 - TriCore C compiler Build 21121068 SN-09003536"
	.compiler_invocation	"ctc --core=tc1.8 -o build/c_demo.asm c_demo.c"
	.compiler_name		"ctc"
  .misrac 'MISRA-C:2004,64,e2,0b,e,e11,27,6,ef83,e1,ef,66,cb75,af1,eff,e7,e7f,8d,63,87ff7,6ff3,4'

---

(source_file
  (directive_calls
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (string_literal))
  (directive_calls
    mnemonic: (directive_mnemonic)
    operands: (string_literal)
    operands: (string_literal)
    operands: (decimal_integer))
  (directive_hll
    mnemonic: (directive_mnemonic)
    (string_literal))
  (directive_hll
    mnemonic: (directive_mnemonic)
    (string_literal))
  (directive_hll
    mnemonic: (directive_mnemonic)
    (string_literal))
  (directive_hll
    mnemonic: (directive_mnemonic)
    (string_literal))
)

============================================
Controls
============================================

$LIST on
$PAGE 
$PAGE 132,72,0,0,0
$PRCTL
$STITLE
$TITLE
$title
$CASE on
$CPU_TC018 on
$DEBUG "AhLS"
$HW_ONLY
$IDENT local
$IDENT global
$MMU
$NO_FPU
$OBJECT
$TC131
$TC16
$TC18
$TC16X
$TC162
$WARNING OFF 135

---

(source_file
  (control (control_mnemonic) (symbol))
  (control (control_mnemonic))
  (control 
    (control_mnemonic)
    (decimal_integer) 
    (decimal_integer)
    (decimal_integer) 
    (decimal_integer)
    (decimal_integer))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic) (symbol))
  (control (control_mnemonic))
  (control (control_mnemonic) (string_literal))
  (control (control_mnemonic))
  (control (control_mnemonic) (symbol))
  (control (control_mnemonic) (symbol))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic))
  (control (control_mnemonic) (decimal_integer))
)